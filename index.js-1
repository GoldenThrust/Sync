import express from "express";
import cors from "cors";
import cookieParser from "cookie-parser";
import { createServer as createHttpsServer } from "https";
import { createServer as createHttpServer } from "http";
import "dotenv/config";
import path from "path";
import process from "process";
import { fileURLToPath } from "url";
import { mongoDB, redisDB } from "./config/db.js";
import { createAdapter } from "@socket.io/redis-streams-adapter";
import { Server } from "socket.io";
import websocket from "./config/websocket.js";
import { getIPAddress } from "./utils/functions.js";
import authRoutes from "./routes/auth.js";
import { authOptionalMiddleware } from "./middlewares/authOptionalMiddleware.js";
import meetRoutes from "./routes/meet.js";
import settingsRoutes from "./routes/settings.js";
import { certOptions } from "./utils/cert.js";


const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


const HTTPS_PORT = process.env.HTTPS_PORT || 443;
const HTTP_PORT = process.env.HTTP_PORT || 8080;
const USE_HTTPS = process.env.USE_HTTPS === 'TRUE';

const allowUrl = [
  `http://localhost:5173`,
  `http://${getIPAddress()}:5173`,
  `https://${getIPAddress()}:${HTTPS_PORT}`,
  `http://${getIPAddress()}:${HTTP_PORT}`,
  'https://localhost:3000',
  'http://localhost:3000'
];

const optionalAuthRoutes = [
  /^\/$/,
  /^\/assets\//,
  /^\/auth\/(?!verify|update-profile|logout).*$/,
  /^\/api\/auth\/(?!verify|update-profile).*$/,
];

const expressApp = express();

expressApp.use(express.json());
expressApp.use(express.urlencoded({ extended: true }));
expressApp.use(cookieParser(process.env.COOKIE_SECRET));
expressApp.use(cors({ origin: allowUrl, credentials: true }));
expressApp.use(authOptionalMiddleware(optionalAuthRoutes))

expressApp.get('/', (req, res) => {
  res.send('Backend is working');
});

expressApp.use('/api/auth', authRoutes);
expressApp.use('/api/lobby', meetRoutes);
expressApp.use('/api/settings', settingsRoutes);

expressApp.use('/uploads', express.static(path.join(__dirname, '/uploads')));


let server;

try {
  if (USE_HTTPS) {

  } else {
    server = createHttpServer(expressApp);
    server.listen(HTTP_PORT, async () => {
      console.log(`HTTP Server is running on port http://localhost:${HTTP_PORT} http://${getIPAddress()}:${HTTP_PORT}`);
      await initializeDatabases();
      initializeSocketIO(server);
    });
  }
} catch (error) {

}


async function initializeDatabases() {
  await mongoDB.run().catch(console.dir);
  await redisDB.run().catch(console.dir);
}

async function initializeSocketIO(server) {
  console.log("Initializing Socket.IO...", redisDB.client.options.url);
  const io = new Server(server, {
    adapter: createAdapter(redisDB.client),
    cors: {
      origin: allowUrl,
      credentials: true
    },
  });


  await websocket.getConnection(io);
}